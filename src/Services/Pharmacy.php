<?php

// This file was generated by liblab | https://liblab.com/

namespace WellSyncServicesCareConnect\Services;

use WellSyncServicesCareConnect\Utils\Serializer;
use WellSyncServicesCareConnect\Models;

class Pharmacy extends BaseService
{
    public function pharmacyReEnqueuePrescription(string $prescriptionId = null): array
    {
        $data = $this->sendRequest('post', '/v1/admin/re-enqueue-prescription', [
            'query' => [
                'prescriptionId' => $prescriptionId,
            ],
        ]);

        return json_decode($data, true);
    }

    public function pharmacyGetCurrentAgentClinicians(string $clinicId = null): Models\GetCurrentAgentCliniciansResponse
    {
        $data = $this->sendRequest('get', '/v1/agent/clinicians', [
            'query' => [
                'clinicId' => $clinicId,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetCurrentAgentCliniciansResponse::class);
    }

    public function pharmacyGetAgents(
        int $paginationSize = null,
        int $paginationPage = null,
        string $agentName = null,
        string $assignableTo = null
    ): Models\GetAgentsResponse {
        $data = $this->sendRequest('get', '/v1/agents', [
            'query' => [
                'pagination.size' => $paginationSize,
                'pagination.page' => $paginationPage,
                'agentName' => $agentName,
                'assignableTo' => $assignableTo,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetAgentsResponse::class);
    }

    public function pharmacyGetAgentClinicians(string $agentId): Models\GetAgentCliniciansResponse
    {
        $data = $this->sendRequest('get', "/v1/agents/{$agentId}/clinicians", []);

        return Serializer::deserialize($data, Models\GetAgentCliniciansResponse::class);
    }

    /**
     * links an agent to a clinic by agent_id and clinic_id agents have to be linked in order to be able to prescribe prescriptions
     */
    public function pharmacyLinkClinicToAgent(string $agentId, string $clinicId): mixed
    {
        $data = $this->sendRequest('put', "/v1/agents/{$agentId}/clinics/{$clinicId}", []);

        return json_decode($data, true);
    }

    /**
     * unlinks an agent from a clinic by agent_id and clinic_id
     */
    public function pharmacyUnlinkClinicFromAgent(string $agentId, string $clinicId): mixed
    {
        $data = $this->sendRequest('delete', "/v1/agents/{$agentId}/clinics/{$clinicId}", []);

        return json_decode($data, true);
    }

    public function pharmacyGetClinic(string $clinicId): Models\GetClinicResponse
    {
        $data = $this->sendRequest('get', "/v1/clinic/{$clinicId}", []);

        return Serializer::deserialize($data, Models\GetClinicResponse::class);
    }

    /**
     * Returns the currently logged in clinician. This endpoint only works for
 sessions authenticated using a careconnect.id account.
     */
    public function pharmacyGetCurrentClinician(): Models\GetCurrentClinicianResponse
    {
        $data = $this->sendRequest('get', '/v1/clinician', []);

        return Serializer::deserialize($data, Models\GetCurrentClinicianResponse::class);
    }

    public function pharmacyGetClinicians(
        string $query = null,
        string $externalId = null,
        bool $filterIsNpiSet = null,
        bool $filterIsPrivateKeySet = null
    ): Models\GetCliniciansResponse {
        $data = $this->sendRequest('get', '/v1/clinicians', [
            'query' => [
                'query' => $query,
                'externalId' => $externalId,
                'filterIsNpiSet' => $filterIsNpiSet,
                'filterIsPrivateKeySet' => $filterIsPrivateKeySet,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetCliniciansResponse::class);
    }

    public function pharmacyCreateClinician(Models\CreateClinicianRequest $input): Models\CreateClinicianResponse
    {
        $data = $this->sendRequest('post', '/v1/clinicians', ['json' => Serializer::serialize($input)]);

        return Serializer::deserialize($data, Models\CreateClinicianResponse::class);
    }

    public function pharmacyGetClinician(string $clinicianId): Models\GetClinicianResponse
    {
        $data = $this->sendRequest('get', "/v1/clinicians/{$clinicianId}", []);

        return Serializer::deserialize($data, Models\GetClinicianResponse::class);
    }

    public function pharmacyUpdateClinician(
        Models\PharmacyUpdateClinicianRequest $input,
        string $clinicianId
    ): Models\UpdateClinicianResponse {
        $data = $this->sendRequest('put', "/v1/clinicians/{$clinicianId}", ['json' => Serializer::serialize($input)]);

        return Serializer::deserialize($data, Models\UpdateClinicianResponse::class);
    }

    public function pharmacyDeleteClinician(string $clinicianId): mixed
    {
        $data = $this->sendRequest('delete', "/v1/clinicians/{$clinicianId}", []);

        return json_decode($data, true);
    }

    public function pharmacyLinkAgentToClinician(
        Models\PharmacyLinkAgentToClinicianRequest $input,
        string $clinicianId
    ): array {
        $data = $this->sendRequest('post', "/v1/clinicians/{$clinicianId}/agent", [
            'json' => Serializer::serialize($input),
        ]);

        return json_decode($data, true);
    }

    public function pharmacyUnlinkAgentFromClinician(string $clinicianId, string $agentId): array
    {
        $data = $this->sendRequest('delete', "/v1/clinicians/{$clinicianId}/agent/{$agentId}", []);

        return json_decode($data, true);
    }

    /**
     * links a clinician to a clinic by clinician_id and clinic_id clinicians have to be linked in order to be able to prescribe prescriptions
     */
    public function pharmacyLinkClinicClinician(string $clinicianId, string $clinicId): mixed
    {
        $data = $this->sendRequest('put', "/v1/clinicians/{$clinicianId}/clinic/{$clinicId}", []);

        return json_decode($data, true);
    }

    /**
     * unlinks a clinician from a clinic by clinician_id and clinic_id
     */
    public function pharmacyUnlinkClinicClinician(string $clinicianId, string $clinicId): mixed
    {
        $data = $this->sendRequest('delete', "/v1/clinicians/{$clinicianId}/clinic/{$clinicId}", []);

        return json_decode($data, true);
    }

    /**
     * TODO: Deprecate this endpoint in favor of GetUserIdentityRecoveryLink
     */
    public function pharmacyGetClinicianIdentityRecoveryLink(
        string $clinicianId
    ): Models\GetClinicianIdentityRecoveryLinkResponse {
        $data = $this->sendRequest('get', "/v1/clinicians/{$clinicianId}/identity/recovery", []);

        return Serializer::deserialize($data, Models\GetClinicianIdentityRecoveryLinkResponse::class);
    }

    public function pharmacyGetClinics(string $query = null, string $externalId = null): Models\GetClinicsResponse
    {
        $data = $this->sendRequest('get', '/v1/clinics', [
            'query' => [
                'query' => $query,
                'externalId' => $externalId,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetClinicsResponse::class);
    }

    public function pharmacyCreateClinic(Models\CreateClinicRequest $input): Models\CreateClinicResponse
    {
        $data = $this->sendRequest('post', '/v1/clinics', ['json' => Serializer::serialize($input)]);

        return Serializer::deserialize($data, Models\CreateClinicResponse::class);
    }

    public function pharmacyUpdateClinic(
        Models\PharmacyUpdateClinicRequest $input,
        string $clinicId
    ): Models\UpdateClinicResponse {
        $data = $this->sendRequest('put', "/v1/clinics/{$clinicId}", ['json' => Serializer::serialize($input)]);

        return Serializer::deserialize($data, Models\UpdateClinicResponse::class);
    }

    public function pharmacyDeleteClinic(string $clinicId): mixed
    {
        $data = $this->sendRequest('delete', "/v1/clinics/{$clinicId}", []);

        return json_decode($data, true);
    }

    public function pharmacyGetClinicClinicians(
        string $clinicId,
        string $query = null
    ): Models\GetClinicCliniciansResponse {
        $data = $this->sendRequest('get', "/v1/clinics/{$clinicId}/clinicians", [
            'query' => [
                'query' => $query,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetClinicCliniciansResponse::class);
    }

    public function pharmacyGetAllowedOrderShippingMethods(
        string $clinicId,
        array $pharmacyIds = null
    ): Models\GetAllowedOrderShippingMethodsResponse {
        $data = $this->sendRequest('get', "/v1/clinics/{$clinicId}/order/shipping-methods", [
            'query' => [
                'pharmacyIds' => $pharmacyIds,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetAllowedOrderShippingMethodsResponse::class);
    }

    public function pharmacyPreviewOrderSummary(
        Models\PharmacyPreviewOrderSummaryRequest $input,
        string $clinicId
    ): Models\PreviewOrderSummaryResponse {
        $data = $this->sendRequest('post', "/v1/clinics/{$clinicId}/order/summary/preview", [
            'json' => Serializer::serialize($input),
        ]);

        return Serializer::deserialize($data, Models\PreviewOrderSummaryResponse::class);
    }

    /**
     * SubmitExternalOrder submits an order for a patient using the given data. All objects are identified by their external_id.
     */
    public function pharmacySubmitExternalOrder(
        Models\PharmacySubmitExternalOrderRequest $input,
        string $clinicId
    ): Models\SubmitExternalOrderResponse {
        $data = $this->sendRequest('post', "/v1/clinics/{$clinicId}/orders", ['json' => Serializer::serialize($input)]);

        return Serializer::deserialize($data, Models\SubmitExternalOrderResponse::class);
    }

    public function pharmacySubmitClinicianOrder(
        Models\PharmacySubmitClinicianOrderRequest $input,
        string $clinicId,
        string $patientId
    ): Models\SubmitClinicianOrderResponse {
        $data = $this->sendRequest('post', "/v1/clinics/{$clinicId}/patients/{$patientId}/orders", [
            'json' => Serializer::serialize($input),
        ]);

        return Serializer::deserialize($data, Models\SubmitClinicianOrderResponse::class);
    }

    public function pharmacyGetOrder(string $clinicId, string $patientId, string $orderId): Models\GetOrderResponse
    {
        $data = $this->sendRequest('get', "/v1/clinics/{$clinicId}/patients/{$patientId}/orders/{$orderId}", []);

        return Serializer::deserialize($data, Models\GetOrderResponse::class);
    }

    public function pharmacyGetPharmacyByDrug(
        string $clinicId,
        string $patientId,
        string $drugId = null,
        string $dosageId = null
    ): Models\GetPharmacyByDrugResponse {
        $data = $this->sendRequest('get', "/v1/clinics/{$clinicId}/patients/{$patientId}/pharmacy", [
            'query' => [
                'drugId' => $drugId,
                'dosageId' => $dosageId,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetPharmacyByDrugResponse::class);
    }

    public function pharmacyGetPatientPrescriptions(
        string $clinicId,
        string $patientId,
        string $externalCaseId = null,
        bool $withDetails = null,
        int $paginationSize = null,
        int $paginationPage = null,
        string $orderId = null
    ): Models\GetPatientPrescriptionsResponse {
        $data = $this->sendRequest('get', "/v1/clinics/{$clinicId}/patients/{$patientId}/prescriptions", [
            'query' => [
                'externalCaseId' => $externalCaseId,
                'withDetails' => $withDetails,
                'pagination.size' => $paginationSize,
                'pagination.page' => $paginationPage,
                'orderId' => $orderId,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetPatientPrescriptionsResponse::class);
    }

    public function pharmacySubmitPrescription(
        Models\PharmacySubmitPrescriptionRequest $input,
        string $clinicId,
        string $patientId
    ): Models\SubmitPrescriptionResponse {
        $data = $this->sendRequest('post', "/v1/clinics/{$clinicId}/patients/{$patientId}/prescriptions", [
            'json' => Serializer::serialize($input),
        ]);

        return Serializer::deserialize($data, Models\SubmitPrescriptionResponse::class);
    }

    public function pharmacyGetPrescriptionItems(
        string $clinicId,
        string $patientId = null,
        string $externalCaseId = null,
        int $paginationSize = null,
        int $paginationPage = null,
        string $orderId = null,
        bool $withDetails = null
    ): Models\GetPrescriptionItemsResponse {
        $data = $this->sendRequest('get', "/v1/clinics/{$clinicId}/prescription-items", [
            'query' => [
                'patientId' => $patientId,
                'externalCaseId' => $externalCaseId,
                'pagination.size' => $paginationSize,
                'pagination.page' => $paginationPage,
                'orderId' => $orderId,
                'withDetails' => $withDetails,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetPrescriptionItemsResponse::class);
    }

    public function pharmacyGetPrescriptionItem(
        string $clinicId,
        string $prescriptionItemId
    ): Models\GetPrescriptionItemResponse {
        $data = $this->sendRequest('get', "/v1/clinics/{$clinicId}/prescription-items/{$prescriptionItemId}", []);

        return Serializer::deserialize($data, Models\GetPrescriptionItemResponse::class);
    }

    public function pharmacyGetPrescriptions(
        string $clinicId,
        string $externalPatientId = null,
        string $externalCaseId = null,
        bool $withDetails = null,
        int $paginationSize = null,
        int $paginationPage = null,
        string $orderId = null
    ): Models\GetPrescriptionsResponse {
        $data = $this->sendRequest('get', "/v1/clinics/{$clinicId}/prescriptions", [
            'query' => [
                'externalPatientId' => $externalPatientId,
                'externalCaseId' => $externalCaseId,
                'withDetails' => $withDetails,
                'pagination.size' => $paginationSize,
                'pagination.page' => $paginationPage,
                'orderId' => $orderId,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetPrescriptionsResponse::class);
    }

    public function pharmacyGetAllDosageForms(): Models\GetAllDosageFormsResponse
    {
        $data = $this->sendRequest('get', '/v1/dosage-forms', []);

        return Serializer::deserialize($data, Models\GetAllDosageFormsResponse::class);
    }

    public function pharmacyGetAllDrugsAndDosages(): Models\GetAllDrugsAndDosagesResponse
    {
        $data = $this->sendRequest('get', '/v1/drugs', []);

        return Serializer::deserialize($data, Models\GetAllDrugsAndDosagesResponse::class);
    }

    public function pharmacyGetDrugs(string $patientId): Models\GetDrugsResponse
    {
        $data = $this->sendRequest('get', "/v1/patients/{$patientId}/drugs", []);

        return Serializer::deserialize($data, Models\GetDrugsResponse::class);
    }

    public function pharmacyGetPharmacies(): Models\GetPharmaciesResponse
    {
        $data = $this->sendRequest('get', '/v1/pharmacies', []);

        return Serializer::deserialize($data, Models\GetPharmaciesResponse::class);
    }

    public function pharmacyGetPharmacyById(string $pharmacyId): Models\GetPharmacyByIdResponse
    {
        $data = $this->sendRequest('get', "/v1/pharmacies/{$pharmacyId}", []);

        return Serializer::deserialize($data, Models\GetPharmacyByIdResponse::class);
    }

    /**
     * Returns the currently logged in user. This endpoint only works for
 sessions authenticated using a careconnect.id account.
     */
    public function pharmacyGetCurrentUser(): Models\GetCurrentUserResponse
    {
        $data = $this->sendRequest('get', '/v1/user', []);

        return Serializer::deserialize($data, Models\GetCurrentUserResponse::class);
    }

    /**
     * SetUserPrivateKey sets the private key for current user
     */
    public function pharmacySetUserPrivateKey(Models\SetUserPrivateKeyRequest $input): array
    {
        $data = $this->sendRequest('post', '/v1/user/private-key', ['json' => Serializer::serialize($input)]);

        return json_decode($data, true);
    }

    public function pharmacyGetUsers(
        string $query = null,
        int $paginationSize = null,
        int $paginationPage = null
    ): Models\GetUsersResponse {
        $data = $this->sendRequest('get', '/v1/users', [
            'query' => [
                'query' => $query,
                'pagination.size' => $paginationSize,
                'pagination.page' => $paginationPage,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetUsersResponse::class);
    }

    /**
     * Add a user adds a user with mentioned roles
 this can not be used to create clinicians but
 once a user is created they converted to clinician
     */
    public function pharmacyAddUser(Models\AddUserRequest $input): Models\AddUserResponse
    {
        $data = $this->sendRequest('post', '/v1/users', ['json' => Serializer::serialize($input)]);

        return Serializer::deserialize($data, Models\AddUserResponse::class);
    }

    public function pharmacyGetUser(string $userId): Models\GetUserResponse
    {
        $data = $this->sendRequest('get', "/v1/users/{$userId}", []);

        return Serializer::deserialize($data, Models\GetUserResponse::class);
    }

    public function pharmacyUpdateUser(
        Models\PharmacyUpdateUserRequest $input,
        string $userId
    ): Models\UpdateUserResponse {
        $data = $this->sendRequest('put', "/v1/users/{$userId}", ['json' => Serializer::serialize($input)]);

        return Serializer::deserialize($data, Models\UpdateUserResponse::class);
    }

    public function pharmacyGetUserClinics(string $userId, string $query = null): Models\GetUserClinicsResponse
    {
        $data = $this->sendRequest('get', "/v1/users/{$userId}/clinics", [
            'query' => [
                'query' => $query,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetUserClinicsResponse::class);
    }

    /**
     * AddClinicMembership adds a user to a clinic with the specified role.
     */
    public function pharmacyAddClinicMembership(array $input, string $userId, string $clinicId, string $role): array
    {
        $data = $this->sendRequest('put', "/v1/users/{$userId}/clinics/{$clinicId}/role/{$role}", [
            'json' => Serializer::serialize($input),
        ]);

        return json_decode($data, true);
    }

    /**
     * RemoveClinicMembership removes a user from a clinic with the specified role.
     */
    public function pharmacyRemoveClinicMembership(string $userId, string $clinicId, string $role): array
    {
        $data = $this->sendRequest('delete', "/v1/users/{$userId}/clinics/{$clinicId}/role/{$role}", []);

        return json_decode($data, true);
    }

    public function pharmacyGetUserIdentityRecoveryLink(string $userId): Models\GetUserIdentityRecoveryLinkResponse
    {
        $data = $this->sendRequest('get', "/v1/users/{$userId}/identity/recovery", []);

        return Serializer::deserialize($data, Models\GetUserIdentityRecoveryLinkResponse::class);
    }

    /**
     * AddPublicKey adds a public key to a clinician
     */
    public function pharmacyGetPublicKeys(string $userId, bool $activeOnly = null): Models\GetPublicKeysResponse
    {
        $data = $this->sendRequest('get', "/v1/users/{$userId}/public-keys", [
            'query' => [
                'activeOnly' => $activeOnly,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetPublicKeysResponse::class);
    }

    /**
     * AddPublicKey adds a public key to a clinician
     */
    public function pharmacyAddPublicKey(
        Models\PharmacyAddPublicKeyRequest $input,
        string $userId
    ): Models\AddPublicKeyResponse {
        $data = $this->sendRequest('post', "/v1/users/{$userId}/public-keys", [
            'json' => Serializer::serialize($input),
        ]);

        return Serializer::deserialize($data, Models\AddPublicKeyResponse::class);
    }

    public function pharmacyAddUserRoles(Models\PharmacyAddUserRolesRequest $input, string $userId): array
    {
        $data = $this->sendRequest('post', "/v1/users/{$userId}/roles", ['json' => Serializer::serialize($input)]);

        return json_decode($data, true);
    }

    public function pharmacyRemoveUserRole(string $userId, string $role): mixed
    {
        $data = $this->sendRequest('delete', "/v1/users/{$userId}/roles/{$role}", []);

        return json_decode($data, true);
    }
}
