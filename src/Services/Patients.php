<?php

// This file was generated by liblab | https://liblab.com/

namespace WellSyncServicesCareConnect\Services;

use WellSyncServicesCareConnect\Utils\Serializer;
use WellSyncServicesCareConnect\Models;

class Patients extends BaseService
{
    public function servicesGetPatients(
        string $externalId = null,
        string $subTenantId = null,
        string $id = null,
        int $paginationSize = null,
        int $paginationPage = null,
        string $query = null
    ): Models\GetPatientsResponse {
        $data = $this->sendRequest('get', '/v1/patients', [
            'query' => [
                'externalId' => $externalId,
                'subTenantId' => $subTenantId,
                'id' => $id,
                'pagination.size' => $paginationSize,
                'pagination.page' => $paginationPage,
                'query' => $query,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetPatientsResponse::class);
    }

    public function servicesCreate(Models\CreatePatientRequest $input): Models\CreatePatientResponse
    {
        $data = $this->sendRequest('post', '/v1/patients', ['json' => Serializer::serialize($input)]);

        return Serializer::deserialize($data, Models\CreatePatientResponse::class);
    }

    public function servicesGet(string $patientId): Models\GetResponse
    {
        $data = $this->sendRequest('get', "/v1/patients/{$patientId}", []);

        return Serializer::deserialize($data, Models\GetResponse::class);
    }

    public function servicesUpdate(
        Models\ServicesUpdateRequest $input,
        string $patientId
    ): Models\UpdatePatientForTenantResponse {
        $data = $this->sendRequest('put', "/v1/patients/{$patientId}", ['json' => Serializer::serialize($input)]);

        return Serializer::deserialize($data, Models\UpdatePatientForTenantResponse::class);
    }

    public function servicesCreateAddressForTenant(
        Models\ServicesCreateAddressForTenantRequest $input,
        string $patientId
    ): Models\CreateAddressForTenantResponse {
        $data = $this->sendRequest('post', "/v1/patients/{$patientId}/addresses", [
            'json' => Serializer::serialize($input),
        ]);

        return Serializer::deserialize($data, Models\CreateAddressForTenantResponse::class);
    }

    public function servicesUpdateAddressForTenant(
        Models\ServicesUpdateAddressForTenantRequest $input,
        string $patientId,
        string $addressId
    ): array {
        $data = $this->sendRequest('patch', "/v1/patients/{$patientId}/addresses/{$addressId}", [
            'json' => Serializer::serialize($input),
        ]);

        return json_decode($data, true);
    }

    public function servicesArchiveAddressForTenant(string $patientId, string $addressId): array
    {
        $data = $this->sendRequest('delete', "/v1/patients/{$patientId}/addresses/{$addressId}", []);

        return json_decode($data, true);
    }
}
